@section Header {
    @Html.Partial("_IndexHeader")
}

@{
    bool first = true;
    foreach(IDocument post in Model.DocumentList(Keys.PageDocuments))
    {                
        if (!first)
        {
            <hr> 
        }
        first = false;
        string lead = post.String(BlogKeys.Lead);
        var tags = post.Get<string[]>(BlogKeys.Tags);

        <article class="post-preview">
            <header>
            <a href="@Context.GetLink(post)">
                <h2 class="post-title">@post.WithoutSettings.String(BlogKeys.Title)
                @if(!string.IsNullOrWhiteSpace(lead))
                {
                    <small class="post-subtitle">@lead</small>
                }
                </h2>
            </a>
            <dl class="post-meta list-flex">
                <dt><i class="fas fa-calendar-alt" aria-hidden="true" title="Published"></i> <span class="sr-only">Published</span></dt>
                <dd>@(post.Get<DateTime>(BlogKeys.Published).ToLongDateString(Context))</dd>

                @if (tags != null)
                {
                    <dt><i class="fas fa-tags" aria-hidden="true" title="Tags"></i> <span class="sr-only">Tags</span></dt>
                        @foreach (string tag in tags.OrderBy(x => x))
                        {
                            IDocument tagDocument = Documents[Blog.Tags].FirstOrDefault(x => x.String(BlogKeys.Tag) == tag && x.Get<int>(Keys.CurrentPage) == 1);
                            if(tagDocument != null)
                            {                
                                <dd><a href="@Context.GetLink(tagDocument)">@tag</a></dd>
                            }
                        }
                    
                } 
            </dl>
            </header>
            @if(Context.Bool(BlogKeys.IndexFullPosts))
            {
                @Html.Raw(post.Content)
            }
            else
            {
                @Html.Raw(post.String(BlogKeys.Excerpt))
                <p><a href="@Context.GetLink(post)">Continue reading</a></p>
            }             
        </article>       
    }

    if(Documents[Blog.BlogPosts].Any() && Context.Bool(BlogKeys.GenerateArchive))
    {
        <div class="clearfix text-center">
            <a href="@Context.GetLink(Context.String(BlogKeys.PostsPath))">More from the blog</a>
        </div>
    }
}

<div class="clearfix">
    @if(Model.Bool(Keys.HasPreviousPage))
    {
        <a class="btn btn-primary float-left" href="@(Context.GetLink(Model.Document(Keys.PreviousPage)))">Newer Posts &larr;</a>
    }
    @if(Model.Bool(Keys.HasNextPage))
    {
        <a class="btn btn-primary float-right" href="@(Context.GetLink(Model.Document(Keys.NextPage)))">Older Posts &rarr;</a>
    }
</div>